pipeline {
    agent any

    environment {
        BACKEND_IMAGE = "ymore23/backend"
        FRONTEND_IMAGE = "ymore23/frontend"
    }

    stages {

        stage('Clean Workspace') {
            steps {
                deleteDir()
            }
        }

        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: 'origin/master']], // Change to 'origin/main' if your repo uses 'main'
                    userRemoteConfigs: [[
                        url: 'https://github.com/yashmore-23/goal-tracker.git'
                    ]],
                    extensions: [
                        [$class: 'WipeWorkspace'], // Clean .git metadata
                        [$class: 'CloneOption', shallow: false, depth: 0, timeout: 10]
                    ]
                ])
            }
        }

        stage('Debug Branches') {
            steps {
                sh 'echo "Available remote branches:"'
                sh 'git branch -r || true'
                sh 'git rev-parse origin/master || true' // Add this to verify branch presence
            }
        }

        stage('Build Docker Images') {
            steps {
                sh "docker build -t $BACKEND_IMAGE -f docker/backend.Dockerfile ."
                sh "docker build -t $FRONTEND_IMAGE -f docker/frontend.Dockerfile ."
            }
        }

        stage('Push Images') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: '186a4a99-e830-4eb3-98fb-4485d8ea5ebf',
                    usernameVariable: 'Username',
                    passwordVariable: 'Password'
                )]) {
                    sh "docker login -u ${env.Username} -p ${env.Password}"
                    sh "docker push $BACKEND_IMAGE"
                    sh "docker push $FRONTEND_IMAGE"
                }
            }
        }

        stage('Apply Kubernetes Config') {
            steps {
                sh 'kubectl apply -f k8s/'
            }
        }
    }

    post {
        failure {
            echo '❌ Build failed. Please check the logs for errors.'
        }
        success {
            echo '✅ CI/CD pipeline completed successfully.'
        }
    }
}
